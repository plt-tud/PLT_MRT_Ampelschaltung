%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.8.1-20121123-13-g875406c
%%CreationDate: Tue Apr 23 20:30:19 2019
%%Title: /home/ichrispa/work/schem/TUD_PLT_MRT2_Ampel/ampel_3licht.sch
%%Author: ichrispa
%%BoundingBox: 0 0 595 841
%%Orientation: Landscape
%%Pages: 1
%%EndComments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
7573 531 translate 90 rotate
0.625134 0.625134 scale
-40000 -40000 translate
gsave
40000 40000 57000 40000 10 line
57000 40000 57000 51000 10 line
57000 51000 40000 51000 10 line
40000 51000 40000 40000 10 line
52900 40600 52900 40000 10 line
gsave
false false false false 161.777776 [(FILE:) ] 0 49500 40400 144.444443 text
grestore
gsave
false false false false 161.777776 [(REVISION:) ] 0 53000 40400 144.444443 text
grestore
gsave
false false false false 161.777776 [(DRAWN BY: ) ] 0 53000 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(PAGE) ] 0 49500 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(OF) ] 0 51200 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(TITLE) ] 0 49500 40700 144.444443 text
grestore
49400 40000 57000 40000 10 line
57000 40000 57000 41400 10 line
57000 41400 49400 41400 10 line
49400 41400 49400 40000 10 line
49400 40600 57000 40600 10 line
grestore
gsave
51900 48300 52100 48300 10 line
52800 48300 52600 48300 10 line
52300 48400 52400 48300 10 line
52400 48300 52300 48200 10 line
52300 48400 52300 48200 10 line
52400 48400 52400 48200 10 line
52400 48300 52600 48300 10 line
52300 48300 52100 48300 10 line
52330 48440 52430 48540 10 line
52430 48540 52380 48510 10 line
52430 48540 52400 48490 10 line
52400 48440 52500 48540 10 line
52500 48540 52450 48510 10 line
52500 48540 52470 48490 10 line
grestore
gsave
false false false false 202.222224 [(D1) ] 0 52700 48500 180.555557 text
grestore
gsave
51900 47800 52100 47800 10 line
52800 47800 52600 47800 10 line
52300 47900 52400 47800 10 line
52400 47800 52300 47700 10 line
52300 47900 52300 47700 10 line
52400 47900 52400 47700 10 line
52400 47800 52600 47800 10 line
52300 47800 52100 47800 10 line
52330 47940 52430 48040 10 line
52430 48040 52380 48010 10 line
52430 48040 52400 47990 10 line
52400 47940 52500 48040 10 line
52500 48040 52450 48010 10 line
52500 48040 52470 47990 10 line
grestore
gsave
false false false false 202.222224 [(D2) ] 0 52700 48000 180.555557 text
grestore
gsave
54400 48100 54250 48100 10 line
53500 48100 53650 48100 10 line
53650 48000 54250 48000 10 line
54250 48000 54250 48200 10 line
54250 48200 53650 48200 10 line
53650 48200 53650 48000 10 line
grestore
gsave
false false false false 202.222224 [(R2) ] 0 53700 48300 180.555557 text
grestore
gsave
false false false false 202.222224 [(100) ] 0 53700 47800 180.555557 text
grestore
gsave
54800 47500 54800 46900 10 line
54600 47200 54800 47200 10 line
gsave
false false false false 121.333336 [(2) ] 0 54700 47250 108.333336 text
grestore
55100 47700 55100 47500 10 line
gsave
false false false false 121.333336 [(3) ] 0 55000 47550 108.333336 text
grestore
55100 46900 55100 46700 10 line
gsave
false false false false 121.333336 [(1) ] 0 55000 46750 108.333336 text
grestore
54800 47350 55100 47500 10 line
54800 47050 55100 46900 10 line
10 setlinewidth
55003 46909 moveto 55101 46900 lineto 55031 46973 lineto 55025 46940 lineto closepath stroke
55003 46909 moveto 55101 46900 lineto 55031 46973 lineto 55025 46940 lineto closepath fill
grestore
gsave
false false false false 202.222224 [(Q1) ] 0 55200 47200 180.555557 text
grestore
gsave
false false false false 202.222224 [(2N3904) ] 0 55300 46900 180.555557 text
grestore
gsave
54400 47200 54250 47200 10 line
53500 47200 53650 47200 10 line
53650 47100 54250 47100 10 line
54250 47100 54250 47300 10 line
54250 47300 53650 47300 10 line
53650 47300 53650 47100 10 line
grestore
gsave
false false false false 202.222224 [(R4) ] 0 53700 47400 180.555557 text
grestore
gsave
false false false false 202.222224 [(10k) ] 0 53700 46900 180.555557 text
grestore
54400 48100 55100 48100 10 line
55100 48100 55100 47700 10 line
54600 47200 54400 47200 10 line
52800 48300 53200 48300 10 line
53200 47800 53200 48300 10 line
53200 48100 53500 48100 10 line
52800 47800 53200 47800 10 line
gsave
55100 46500 55100 46700 10 line
55000 46500 55200 46500 10 line
55055 46450 55145 46450 10 line
55080 46410 55120 46410 10 line
grestore
gsave
51900 46000 52100 46000 10 line
52800 46000 52600 46000 10 line
52300 46100 52400 46000 10 line
52400 46000 52300 45900 10 line
52300 46100 52300 45900 10 line
52400 46100 52400 45900 10 line
52400 46000 52600 46000 10 line
52300 46000 52100 46000 10 line
52330 46140 52430 46240 10 line
52430 46240 52380 46210 10 line
52430 46240 52400 46190 10 line
52400 46140 52500 46240 10 line
52500 46240 52450 46210 10 line
52500 46240 52470 46190 10 line
grestore
gsave
false false false false 202.222224 [(D3) ] 0 52700 46200 180.555557 text
grestore
gsave
51900 45500 52100 45500 10 line
52800 45500 52600 45500 10 line
52300 45600 52400 45500 10 line
52400 45500 52300 45400 10 line
52300 45600 52300 45400 10 line
52400 45600 52400 45400 10 line
52400 45500 52600 45500 10 line
52300 45500 52100 45500 10 line
52330 45640 52430 45740 10 line
52430 45740 52380 45710 10 line
52430 45740 52400 45690 10 line
52400 45640 52500 45740 10 line
52500 45740 52450 45710 10 line
52500 45740 52470 45690 10 line
grestore
gsave
false false false false 202.222224 [(D4) ] 0 52700 45700 180.555557 text
grestore
gsave
54400 45800 54250 45800 10 line
53500 45800 53650 45800 10 line
53650 45700 54250 45700 10 line
54250 45700 54250 45900 10 line
54250 45900 53650 45900 10 line
53650 45900 53650 45700 10 line
grestore
gsave
false false false false 202.222224 [(R5) ] 0 53700 46000 180.555557 text
grestore
gsave
false false false false 202.222224 [(100) ] 0 53700 45500 180.555557 text
grestore
gsave
54800 45200 54800 44600 10 line
54600 44900 54800 44900 10 line
gsave
false false false false 121.333336 [(2) ] 0 54700 44950 108.333336 text
grestore
55100 45400 55100 45200 10 line
gsave
false false false false 121.333336 [(3) ] 0 55000 45250 108.333336 text
grestore
55100 44600 55100 44400 10 line
gsave
false false false false 121.333336 [(1) ] 0 55000 44450 108.333336 text
grestore
54800 45050 55100 45200 10 line
54800 44750 55100 44600 10 line
10 setlinewidth
55003 44609 moveto 55101 44600 lineto 55031 44673 lineto 55025 44640 lineto closepath stroke
55003 44609 moveto 55101 44600 lineto 55031 44673 lineto 55025 44640 lineto closepath fill
grestore
gsave
false false false false 202.222224 [(Q2) ] 0 55200 44900 180.555557 text
grestore
gsave
false false false false 202.222224 [(2N3904) ] 0 55300 44600 180.555557 text
grestore
gsave
54400 44900 54250 44900 10 line
53500 44900 53650 44900 10 line
53650 44800 54250 44800 10 line
54250 44800 54250 45000 10 line
54250 45000 53650 45000 10 line
53650 45000 53650 44800 10 line
grestore
gsave
false false false false 202.222224 [(R6) ] 0 53700 45100 180.555557 text
grestore
gsave
false false false false 202.222224 [(10k) ] 0 53700 44600 180.555557 text
grestore
54400 45800 55100 45800 10 line
55100 45800 55100 45400 10 line
54600 44900 54400 44900 10 line
52800 46000 53200 46000 10 line
53200 45500 53200 46000 10 line
53200 45800 53500 45800 10 line
52800 45500 53200 45500 10 line
gsave
55100 44200 55100 44400 10 line
55000 44200 55200 44200 10 line
55055 44150 55145 44150 10 line
55080 44110 55120 44110 10 line
grestore
gsave
51900 43800 52100 43800 10 line
52800 43800 52600 43800 10 line
52300 43900 52400 43800 10 line
52400 43800 52300 43700 10 line
52300 43900 52300 43700 10 line
52400 43900 52400 43700 10 line
52400 43800 52600 43800 10 line
52300 43800 52100 43800 10 line
52330 43940 52430 44040 10 line
52430 44040 52380 44010 10 line
52430 44040 52400 43990 10 line
52400 43940 52500 44040 10 line
52500 44040 52450 44010 10 line
52500 44040 52470 43990 10 line
grestore
gsave
false false false false 202.222224 [(D5) ] 0 52700 44000 180.555557 text
grestore
gsave
51900 43300 52100 43300 10 line
52800 43300 52600 43300 10 line
52300 43400 52400 43300 10 line
52400 43300 52300 43200 10 line
52300 43400 52300 43200 10 line
52400 43400 52400 43200 10 line
52400 43300 52600 43300 10 line
52300 43300 52100 43300 10 line
52330 43440 52430 43540 10 line
52430 43540 52380 43510 10 line
52430 43540 52400 43490 10 line
52400 43440 52500 43540 10 line
52500 43540 52450 43510 10 line
52500 43540 52470 43490 10 line
grestore
gsave
false false false false 202.222224 [(D6) ] 0 52700 43500 180.555557 text
grestore
gsave
54400 43600 54250 43600 10 line
53500 43600 53650 43600 10 line
53650 43500 54250 43500 10 line
54250 43500 54250 43700 10 line
54250 43700 53650 43700 10 line
53650 43700 53650 43500 10 line
grestore
gsave
false false false false 202.222224 [(R7) ] 0 53700 43800 180.555557 text
grestore
gsave
false false false false 202.222224 [(100) ] 0 53700 43300 180.555557 text
grestore
gsave
54800 43000 54800 42400 10 line
54600 42700 54800 42700 10 line
gsave
false false false false 121.333336 [(2) ] 0 54700 42750 108.333336 text
grestore
55100 43200 55100 43000 10 line
gsave
false false false false 121.333336 [(3) ] 0 55000 43050 108.333336 text
grestore
55100 42400 55100 42200 10 line
gsave
false false false false 121.333336 [(1) ] 0 55000 42250 108.333336 text
grestore
54800 42850 55100 43000 10 line
54800 42550 55100 42400 10 line
10 setlinewidth
55003 42409 moveto 55101 42400 lineto 55031 42473 lineto 55025 42440 lineto closepath stroke
55003 42409 moveto 55101 42400 lineto 55031 42473 lineto 55025 42440 lineto closepath fill
grestore
gsave
false false false false 202.222224 [(Q3) ] 0 55200 42700 180.555557 text
grestore
gsave
false false false false 202.222224 [(2N3904) ] 0 55300 42400 180.555557 text
grestore
gsave
54400 42700 54250 42700 10 line
53500 42700 53650 42700 10 line
53650 42600 54250 42600 10 line
54250 42600 54250 42800 10 line
54250 42800 53650 42800 10 line
53650 42800 53650 42600 10 line
grestore
gsave
false false false false 202.222224 [(R8) ] 0 53700 42900 180.555557 text
grestore
gsave
false false false false 202.222224 [(10k) ] 0 53700 42400 180.555557 text
grestore
54400 43600 55100 43600 10 line
55100 43600 55100 43200 10 line
54600 42700 54400 42700 10 line
52800 43800 53200 43800 10 line
53200 43300 53200 43800 10 line
53200 43600 53500 43600 10 line
52800 43300 53200 43300 10 line
gsave
55100 42000 55100 42200 10 line
55000 42000 55200 42000 10 line
55055 41950 55145 41950 10 line
55080 41910 55120 41910 10 line
grestore
49900 48300 51900 48300 10 line
51900 47800 51600 47800 10 line
51600 43300 51600 48300 10 line
51900 46000 51600 46000 10 line
51900 45500 51600 45500 10 line
51900 43800 51600 43800 10 line
51900 43300 51600 43300 10 line
gsave
49900 48700 49700 48700 10 line
gsave
false true false false 161.777776 [(1) ] 0 49550 48700 144.444443 text
grestore
49650 48700 50 0 360 10 darc
49900 48300 49700 48300 10 line
gsave
false true false false 161.777776 [(2) ] 0 49550 48300 144.444443 text
grestore
49650 48300 50 0 360 10 darc
49900 47900 49700 47900 10 line
gsave
false true false false 161.777776 [(3) ] 0 49550 47900 144.444443 text
grestore
49650 47900 50 0 360 10 darc
49900 47500 49700 47500 10 line
gsave
false true false false 161.777776 [(4) ] 0 49550 47500 144.444443 text
grestore
49650 47500 50 0 360 10 darc
49900 47100 49700 47100 10 line
gsave
false true false false 161.777776 [(5) ] 0 49550 47100 144.444443 text
grestore
49650 47100 50 0 360 10 darc
49900 46700 49700 46700 10 line
gsave
false true false false 161.777776 [(6) ] 0 49550 46700 144.444443 text
grestore
49650 46700 50 0 360 10 darc
49200 46300 49600 46300 10 line
49600 46300 49600 49100 10 line
49600 49100 49200 49100 10 line
49200 49100 49200 46300 10 line
grestore
gsave
false false false false 202.222224 [(CONN1) ] 0 49200 49200 180.555557 text
grestore
49900 48700 50500 48700 10 line
gsave
50500 48500 50500 48700 10 line
50400 48500 50600 48500 10 line
50455 48450 50545 48450 10 line
50480 48410 50520 48410 10 line
grestore
53500 47200 52300 47200 10 line
52300 47200 52300 47500 10 line
52300 47500 49900 47500 10 line
49900 47100 51100 47100 10 line
51100 44900 51100 47100 10 line
51100 44900 53500 44900 10 line
49900 46700 50600 46700 10 line
50600 42700 50600 46700 10 line
50600 42700 53500 42700 10 line
gsave
52600 49200 52750 49200 10 line
gsave
false false false false 161.777776 [(1) ] 0 52650 49250 144.444443 text
grestore
53450 49200 53600 49200 10 line
gsave
false false false false 161.777776 [(2) ] 0 53500 49250 144.444443 text
grestore
52750 49200 52925 49200 10 line
53450 49200 53275 49200 10 line
52900 49285 53300 49285 10 line
52939 49200 14 0 360 10 darc
53262 49200 14 0 360 10 darc
53070 49455 53120 49455 10 line
53070 49405 53120 49405 10 line
53070 49405 53095 49355 10 line
53120 49405 53095 49355 10 line
53095 49405 53095 49455 10 line
53095 49355 53095 49286 10 line
grestore
gsave
false false false false 202.222224 [(S1) ] 0 53000 49500 180.555557 text
grestore
51600 48300 51600 49200 10 line
gsave
55900 49200 55750 49200 10 line
55000 49200 55150 49200 10 line
55150 49100 55750 49100 10 line
55750 49100 55750 49300 10 line
55750 49300 55150 49300 10 line
55150 49300 55150 49100 10 line
grestore
gsave
false false false false 202.222224 [(R3) ] 0 55200 49400 180.555557 text
grestore
gsave
false false false false 202.222224 [(100k) ] 0 55200 48900 180.555557 text
grestore
gsave
56500 48500 56500 48700 10 line
56400 48500 56600 48500 10 line
56455 48450 56545 48450 10 line
56480 48410 56520 48410 10 line
grestore
51200 49800 55100 49800 10 line
51200 49800 51200 47900 10 line
51200 47900 49900 47900 10 line
gsave
52500 49200 52350 49200 10 line
51600 49200 51750 49200 10 line
51750 49100 52350 49100 10 line
52350 49100 52350 49300 10 line
52350 49300 51750 49300 10 line
51750 49300 51750 49100 10 line
grestore
gsave
false false false false 202.222224 [(R1) ] 0 51800 49400 180.555557 text
grestore
gsave
false false false false 202.222224 [(50k) ] 0 51800 48900 180.555557 text
grestore
52500 49200 52600 49200 10 line
gsave
55100 49800 55300 49800 10 line
56000 49800 55800 49800 10 line
55500 50000 55500 49600 10 line
55600 50000 55600 49600 10 line
55800 49800 55600 49800 10 line
55500 49800 55300 49800 10 line
grestore
gsave
false false false false 202.222224 [(C1) ] 0 55300 50100 180.555557 text
grestore
gsave
false false false false 202.222224 [(1u) ] 0 55700 49900 180.555557 text
grestore
gsave
false false false false 202.222224 [(5V:               ~15mA / LED) (3.3V:        ~6 mA / LED) ] 0 49100 49600 180.555557 text
grestore
53600 49200 55000 49200 10 line
56000 49800 56500 49800 10 line
56500 49800 56500 48700 10 line
55900 49200 56500 49200 10 line
54200 49200 54200 49800 10 line
gsave
false false false false 202.222224 [(MRT Ampel) ] 0 50100 40700 180.555557 text
grestore
gsave
false false false false 202.222224 [(Chris Iatrou) ] 0 53900 40100 180.555557 text
grestore
gsave
false false false false 202.222224 [(v1.1) ] 0 53900 40400 180.555557 text
grestore
gsave
false false false false 202.222224 [(TUD) (PLT/SVT) (2018) ] 0 49400 41800 180.555557 text
grestore
newpath
53200 48100
25
0 360 arc
fill
newpath
53200 48100
25
0 360 arc
fill
newpath
53200 48100
25
0 360 arc
fill
newpath
53200 45800
25
0 360 arc
fill
newpath
53200 45800
25
0 360 arc
fill
newpath
53200 45800
25
0 360 arc
fill
newpath
53200 43600
25
0 360 arc
fill
newpath
53200 43600
25
0 360 arc
fill
newpath
53200 43600
25
0 360 arc
fill
newpath
51600 48300
25
0 360 arc
fill
newpath
51600 48300
25
0 360 arc
fill
newpath
51600 47800
25
0 360 arc
fill
newpath
51600 47800
25
0 360 arc
fill
newpath
51600 48300
25
0 360 arc
fill
newpath
51600 48300
25
0 360 arc
fill
newpath
51600 47800
25
0 360 arc
fill
newpath
51600 46000
25
0 360 arc
fill
newpath
51600 45500
25
0 360 arc
fill
newpath
51600 43800
25
0 360 arc
fill
newpath
51600 46000
25
0 360 arc
fill
newpath
51600 46000
25
0 360 arc
fill
newpath
51600 45500
25
0 360 arc
fill
newpath
51600 45500
25
0 360 arc
fill
newpath
51600 43800
25
0 360 arc
fill
newpath
51600 43800
25
0 360 arc
fill
newpath
51600 48300
25
0 360 arc
fill
newpath
51600 48300
25
0 360 arc
fill
newpath
54200 49800
25
0 360 arc
fill
newpath
54200 49200
25
0 360 arc
fill
newpath
56500 49200
25
0 360 arc
fill
newpath
56500 49200
25
0 360 arc
fill
newpath
56500 49200
25
0 360 arc
fill
newpath
54200 49200
25
0 360 arc
fill
newpath
54200 49800
25
0 360 arc
fill
newpath
54200 49800
25
0 360 arc
fill
newpath
54200 49200
25
0 360 arc
fill
showpage
%%End
